=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
TerryLib:                     
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Work in progress! Nice looking HTML reference coming soon!
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

TerryLib is a tiny haxe programming library for beginners.

Here's a complete list of what you can do with it!

Graphics:
----------
Load in images and draw them, draw simple shapes, and divide images into tilesets! Do simple animations!

Fonts:
----------
Load in different fonts at different sizes and display them! Take in simple string input!

Music:
----------
Load in music and sound effects! Play them back!

Input:
----------
Read in Keyboard and Mouse input!

Basic structure:
-------------------------
TerryLib sets everything up in the background, and starts you with a single class, Main.hx.

Main.hx contains one function, update(), and can optionally contain two more: new() and reset().

update() is called 60 times a second. (You can change the framerate if you like in project.xml.)

new() is called when the program starts, if it exists.

reset() is called when you change scene, if it exists!

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
FULL COMMAND LIST:
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Graphics:
-------------------------

//Setup
Gfx.resizescreen(width, height, scale);
 
  - By default, TerryLib has a 768x480 screen with 1:1 scaling. If you want something different,
    call this function in Main.new(). E.g:
    
    function new() {
      Gfx.resizescreen(384, 240, 2); // Create a 384x240 screen at 2:1 scaling.
    }
  
    You might also need to change the actual window size - this is in project.xml.

Gfx.clearscreen();        // Clears the screen to BLACK, can optionally take a colour variable.

//Images
Gfx.loadimage("imagename");
  
  - Place .PNG or .JPG images in data/graphics/, and call this function to load them in. e.g:
    
    Gfx.loadimage("titlescreen");  // Loads in data/graphics/titlescreen.png
    Gfx.loadimage("background");   // Loads in data/graphics/background.jpg

drawimage(x, y, "imagename", optional parameters);

  - e.g. 
      Gfx.drawimage(0, 0, "monalisa");

  - drawimage functions can also take the following arguments as optional parameters:
      scale          - float, 1.0 is original size.
      xscale, yscale - you can have different x and y scale values if you like
      rotation       - rotation between 0-359
      xpivot, ypivot - position in image to rotate and scale from.
      alpha          - between 0.0 and 1.0, the transparancy of the image. 1.0 is solid.
      red,green,blue - How much to multiply the red, green and blue values of the image by. 
                       1.0 is normal.
      xalign, yalign - Aligns the image to the given axis. Can be set to:
                       Gfx.TOP, Gfx.BOTTOM, Gfx.LEFT, Gfx.RIGHT, Gfx.CENTER
    
    These parameters should be grouped together and labeled between {} brackets like this:
      
    e.g. 
      Gfx.drawimage(50, 50, "monalisa", { scale: 2 });
      Gfx.drawimage(50, 50, "monabart", { xscale: 2.5, alpha:0.5 });
      Gfx.drawimage(0, 0, "monamaggie", { rotation: 45, xpivot: 250, ypivot: 100 });
   
  - You can use the following constants for values of x, y, xpivot, ypivot, xalign and yalign:
    Gfx.TOP, Gfx.BOTTOM, Gfx.LEFT, Gfx.RIGHT, Gfx.CENTER
     
    e.g
      Gfx.drawimage(Gfx.CENTER, Gfx.CENTER, "logo");
      
      t = t + 1;
      Gfx.drawimage(200, 100, "star", { rotation: t, xpivot: Gfx.CENTER, ypivot: Gfx.CENTER });

//Tilesets
Gfx.loadtiles("imagename", tilewidth, tileheight);
  
  - Place .PNG images in data/graphics/, and call this function to load them in. e.g:
    Gfx.make("forest", 16, 16);  // Loads in data/graphics/forest.png and makes 16x16 tiles.

Gfx.changetileset("newtileset");
 
  - Changes the tileset that all subsequent Gfx.drawtile() commands refer to. e.g.
    Gfx.changetileset("forest"); drawtile(0, 0, 4); // Draws tile 4 from the "forest" tileset at 0,0
    Gfx.changetileset("city"); drawtile(10, 20, 7); // Draws tile 7 from the "city" tileset at 10,20
  
drawtile(x, y, tilenumber, optional parameters);

  - Drawtiles functions take all the same arguments as drawimage functions. 
  
//Primatives
Gfx.drawbox(x, y, width, height, col);
Gfx.fillbox(x, y, width, height, col);

Gfx.drawtri(x1, y1, x2, y2, x3, y3, col);
Gfx.filltri(x1, y1, x2, y2, x3, y3, col);

Gfx.drawcircle(x, y, radius, col);
Gfx.fillcircle(x, y, radius, col);

Gfx.drawhexagon(x, y, radius, angle, col);
Gfx.fillhexagon(x, y, radius, angle, col);

Gfx.drawline(x1, y1, x2, y2, col);

Gfx.setlinethickness(linethickness);       // Default value is 1 pixel.

  - All primative draw functions (line, triangle, circle, box) can take an optional alpha
    value between 0.0 and 1.0. It's 1.0 by default.

  - "col" is a haxe HexCol, which is an int written like e.g this: 0xFFFFFF
    Or you could use the functions below:

t = Gfx.getpixel(x, y);           // Returns the colour of the pixel at (x, y).

//Colours
t = Gfx.RGB(red, green, blue);                 //Red, Green and Blue are between 0-255.
t = Gfx.HSL(hue, saturation, lightness);       //Hue is between 0-360. 
                                               //Saturation and lightness are between 0.0 and 1.0.
redvalue = Gfx.getred(col);
greenvalue = Gfx.getgreen(col);
bluevalue = Gfx.getblue(col);

There are 16 preset colours (based on Arne's famous 16 colour palette) that you can use with the following constants:

Col.BLACK, Col.GREY, Col.WHITE, Col.RED, Col.PINK, Col.DARKBROWN, Col.BROWN, Col.ORANGE,
Col.YELLOW, Col.DARKGREEN, Col.GREEN, Col.LIGHTGREEN, Col.NIGHTBLUE, Col.DARKBLUE,
Col.BLUE, Col.LIGHTBLUE, Col.MAGENTA

In flashdevelop and other editors with tab completion, you should see the full list 
after you type "Col." in your editor.

Some advanced drawing functions that you might eventually be interested in, but probably don't need to worry about when you're starting out:
                    
t = Gfx.screenwidth;                  // Width of the screen.
t = Gfx.screenheight;                 // Height of the screen.

t = Gfx.imagewidth("imagename");             // Returns the width of an image.
t = Gfx.imageheight("imagename");            // Returns the height of an image.
t = Gfx.tilewidth();                         // Returns the width of a tile in the current tileset.
t = Gfx.tileheight();                        // Returns the height of a tile in the current tileset.

Gfx.createimage("imagename", width, height); 
  // Creates a blank image, with the name "imagename", with given width and height. */

Gfx.createtiles("imagename", width, height, amount); 
  // Creates a blank tileset, with the tileset name "imagename", with each tile a given 
     width and height, containing "amount" tiles.
t = Gfx.numberoftiles();              // Returns the total number of tiles in a tileset.

Gfx.drawtoscreen();                   // Tell future draw commands to draw to the actual screen.
Gfx.drawtoimage("imagename");         // Tell future draw commands to draw to the given image.
Gfx.drawtotile(tilenumber);           // Tell future draw commands to draw to the given tile 
                                      // in the current tileset.
                                      
Gfx.copytile(tilenumber in current tileset, "tileset to copy from", tilenumber in other tileset);
  // Copys a tile from one tileset to another. Tilesets must be have the same image dimensions!
  
Gfx.grabtilefromscreen(tilenumber, x position in screen, y position in screen);
  // Copys a rectangle from x, y on the screen into the current tileset.

Gfx.grabtilefromimage(tilenumber, "imagename", x position in image, y position in image);
  // Copys a rectangle from x, y in the given image into the current tileset.

Gfx.grabimagefromscreen("imagename", x position in screen, y position in screen);
  // "imagename" will already have a width and a height from when it was created/loaded.
  // This function grabs a copy of the screen from position x,y, and places it in the image.
  
Gfx.grabimagefromimage("imagename", "imagetocopyfrom", x position in image, y position in image);
  // "imagename" will already have a width and a height from when it was created/loaded.
  // This function grabs a copy of image "imagetocopyfrom" from position x,y, and places 
  // it in the other image.
  

Animation:
-------------------------

You can do simple animations with tilesets! 

Gfx.defineanimation("animationname", "tileset", start frame, end frame, delay per frame);
  // Animations in TerryLib work by drawing frames from a subset of a tileset, with a delay
  // between each one. First, you need to define some animations and give them a name, like this
  // for example:
  //
  // Say we have a tileset called "playertiles" with lots of frames of the player walking.
  // Say the first five are walking left, and the next five are walking right.
  // We could define two animations like this:
  //
  // Gfx.defineanimation("anim_walkleft", "playertiles", 0, 4, 4);
  // Gfx.defineanimation("anim_walkright", "playertiles", 5, 9, 1);
  //
  // In the first case, we define "anim_walkleft" as an animation from tiles 0, 1, 2, 3, and 4 of
  // tileset "playertiles", with a delay of 4 ticks between each frame. In the second case, we
  // define "anim_walkright" as an animation from tiles 5, 6, 7, 8, 9 with a delay of just 1 tick
  // between each frame.
  
Gfx.drawanimation(x, y, "animation name", optional parameters);
  // Draws the given animation at (x, y), using the same optional parameters as drawtile.
  
Gfx.stopanimation("animation name");   // Resets this animation to the first frame.

Text:
-------------------------

//Load fonts:
Text.addfont("fontname", defaultsize);

  - Place .TTF fonts in data/fonts/, and call this function to load them in. e.g:
  
  Text.addfont("arial", 16);
  
  TerryLib's default font is Google's "Open Sans" font, size 24.
  
Text.changefont("fontname");
Text.changesize(fontsize);

Text.display(x, y, "thing to display", col, optional parameters);

  - Text display functions take all the same arguments as Drawimage, and also the following:
    
    align: Set to Text.LEFT to align to the left, Text.CENTER to align to the center, and
           Text.RIGHT align to the right. Eg:
    
    Text.display(200, 0, "centered around (200, 0)", 0xFFFFFF, {align: Text.CENTER});
    Text.display(700, 0, "top right corner", 0xFFFFFF, {align: Text.RIGHT});
  
  - You can use the following constants for values of x, y, pivotx and pivoty:
    Text.TOP, Text.BOTTOM, Text.LEFT, Text.RIGHT, Text.CENTER

if (Text.input(x, y, "Question: ", question_colour, answer_colour)) {
  Debug.log(Text.getinput());
}

  - Text.input is TRUE when the user presses ENTER. Text.getinput() returns your response.

Music:
-------------------------

Music.loadsong("songname");

  - Place .MP3 files in data/music/mp3/ (for flash), or place .OGG files data/music/ogg/ 
    (for non-flash), and call this function to load them in. e.g:
    
  Music.loadsong("uptownfunk"); //Loads in data/music/mp3/uptownfunk.mp3 in flash, or
                                //data/music/ogg/uptownfunk.ogg in anything else.
  
  Can take a volume level between 0.0 and 1.0 as a second option. e.g:
  
  Music.loadsong("shakeitoff", 0.5);
  

Music.loadsound("effectname");
 
  - Loads in a sound effect from the data/sounds/ folder. Same mp3 and ogg deal as with music.
    Also takes an optional volume option, which defaults to 1.0.
    
Music.play("songname"); //Optionally takes a second parameter, seconds into the song to start at.
Music.stop();
Music.fadeout();

Music.playsound("effectname");
Music.stopsound();
  
Input:
-------------------------

Keyboard keys are identified like this: Key.ENTER, Key.SPACE, Key.W, etc. Here's a full list
of allowed keys:

//Letters
A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z

//Numbers
ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE

//Function keys
F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12

//Punctuation
MINUS, PLUS, DELETE, BACKSPACE, LBRACKET, RBRACKET, BACKSLASH
CAPSLOCK, SEMICOLON, QUOTE, COMMA, PERIOD, SLASH

//Control characters
ESCAPE, ENTER, SHIFT, CONTROL, ALT, SPACE
UP, DOWN, LEFT, RIGHT

In flashdevelop and other editors with tab completion, you should see the full list 
after you type "Key." in your editor.

Input.justpressed(Key.ENTER);    // True when the key has been pressed this frame

Input.pressed(Key.LEFT);         // True if this key is held down

Input.justreleased(Key.SPACE);   // True if the key has been released this frame

Input.delaypressed(Key.Z, 5);    // True if Z is pressed, but only every fifth frame.
                                 // Just a handy shortcut for key delay rates!

Mouse.x                      // Mouse x position.
Mouse.y                      // Mouse y position.

Mouse.leftclick()        // True if you've just clicked left this frame
Mouse.leftheld()         // True if you're holding down left click.
Mouse.leftreleased()     // True if you've just released left-click this frame

Mouse.middleclick()      // True if you've just clicked middle this frame
Mouse.middleheld()       // True if you're holding down middle click.
Mouse.middlereleased()   // True if you've just released middle-click this frame

Mouse.rightclick()       // True if you've just clicked right this frame
Mouse.rightheld()        // True if you're holding down right click.
Mouse.rightreleased()    // True if you've just released right-click this frame
                         // *** Right mouse checks don't work in flash!

Mouse.mousewheel             // An int between -3 and +3 for the scrollwheel value.
                             // For most mice it seems best to just check ==0, <0 and >0.

Scene Control:
-------------------------

Scene.change(newscene)
  // Changes the scene! New scenes need to contain an update function. Here's an example!
  
//in Main.hx
import terrylib.*;

class Main{
  function update(){
		if (Mouse.leftclick()) {
			Scene.change(Titlescreen);
		}
		
		Text.display(0, 0, "Main scene");
  }
}

//in Titlescreen.hx
import terrylib.*;

class Titlescreen {
  function update(){
		if (Mouse.leftclick()) {
			Scene.change(Main);
		}
		
		Text.display(0, 0, "Titlescene");
  }
}

// That's it!

The only other scene function is "get", which is used to access public variables in other scenes. For example:

t = Scene.get(Titlescreen).titlescreenvariable;

(You can also do this with static variables, if you like. See the tutorial for more info about that)

Other useful functions:
-------------------------
Convert.tostring(1234);         // Returns a string, in this case: "1234"
Convert.toint("15");            // Returns an int, in this case: 15
Convert.tofloat("3.1417826");   // Returns a float, in this case: 3.1417826

Random.int(from, to);           // Returns a random int between "from" and "to", inclusive.
Random.float(from, to);         // Returns a random float between "from" and "to", inclusive.
Random.string(length);          // Returns a random string of regular characters, of given length.

Random.bool();                  // Returns a bool, 50% chance of either true of false.
Random.occasional();            // Returns a bool, 20% chance of true, 80% false. 
Random.rare();                  // Returns a bool, 5% chance of true, 95% false. 

Random.pickstring("this one", "or this one?", "maybe this one?");
  //Pick between a list of strings. Can list up to 12!
  
Random.pickint(5, 14, 72, 92, 1, -723, 8);
  // Pick between a list of ints. Can list up to 12!

Random.pickfloat(5.1, 14.2, 72.3, 92.4, 1.5, -723.6, 8.7);
  // Pick between a list of Floats. Can list up to 12!
  
Debug.clearlog();                      //Clears debug lines from the screen
Debug.log("thing to output");          //Outputs a string to the screen, pushing other strings down
Debug.test("thing to display");        //Clears the debug log and shows a single string

//To output debug info to the console, use Haxe's build in trace() function instead.
